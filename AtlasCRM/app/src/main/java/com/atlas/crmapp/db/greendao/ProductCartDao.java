package com.atlas.crmapp.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.atlas.crmapp.db.model.ProductCart;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT_CART".
*/
public class ProductCartDao extends AbstractDao<ProductCart, Long> {

    public static final String TABLENAME = "PRODUCT_CART";

    /**
     * Properties of entity ProductCart.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProductId = new Property(1, long.class, "productId", false, "PRODUCT_ID");
        public final static Property Num = new Property(2, int.class, "num", false, "NUM");
        public final static Property BizCode = new Property(3, String.class, "bizCode", false, "BIZ_CODE");
        public final static Property UnitId = new Property(4, long.class, "unitId", false, "UNIT_ID");
    }


    public ProductCartDao(DaoConfig config) {
        super(config);
    }
    
    public ProductCartDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT_CART\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRODUCT_ID\" INTEGER NOT NULL ," + // 1: productId
                "\"NUM\" INTEGER NOT NULL ," + // 2: num
                "\"BIZ_CODE\" TEXT," + // 3: bizCode
                "\"UNIT_ID\" INTEGER NOT NULL );"); // 4: unitId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT_CART\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ProductCart entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProductId());
        stmt.bindLong(3, entity.getNum());
 
        String bizCode = entity.getBizCode();
        if (bizCode != null) {
            stmt.bindString(4, bizCode);
        }
        stmt.bindLong(5, entity.getUnitId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ProductCart entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getProductId());
        stmt.bindLong(3, entity.getNum());
 
        String bizCode = entity.getBizCode();
        if (bizCode != null) {
            stmt.bindString(4, bizCode);
        }
        stmt.bindLong(5, entity.getUnitId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ProductCart readEntity(Cursor cursor, int offset) {
        ProductCart entity = new ProductCart( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // productId
            cursor.getInt(offset + 2), // num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bizCode
            cursor.getLong(offset + 4) // unitId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ProductCart entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductId(cursor.getLong(offset + 1));
        entity.setNum(cursor.getInt(offset + 2));
        entity.setBizCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUnitId(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ProductCart entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ProductCart entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ProductCart entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
